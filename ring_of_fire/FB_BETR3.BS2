'Program: fb_btr3.BS2 version 3 9/01/97
'Question of Truth show Bio Feed back exhibit control program
'Ontario Science Centre
'770 Don Mills Road
'Don Mills, Ontario
'M3C 1T3

'1996 Question of Truth Show, Psycology
'Exhibit #4005-2645

'programmer B. Hambleton
'This program operates the hardware of the Bio Feedback exhibit of the OSC 
'Question of Truth show. 

'The hardware of the system comprises a basic stampII upon which this code
'is executed, a Thought Technologies calmpute is employed to do the actual
'GSR (Galvanic Skin Response) measurements and a Max 7219 LED dislplay chip
'provides the feedback stimulus output to the participant. This output is 
'64 discrete LEDs arranged in a 23" diameter circular pattern. 

'In addition to the visual Bio feed back system there is also 
'an audio component to this exhibit comprising a CD player and Technovision
'PC II controller. The audio playback is started by a coinco push button.
'The Stamp has the capacity built in to both the software and the hardware 
'of the custom PC board to start the playback of the CD tracks germaine to 
'this exhibit automaticlly whenever a participants 'connect' themselves to 
'the gsr sensor. A reed relay electriclly parralleled with the coinco 
'accomplishes this. This audio automatic start feature however was not 
'exploited for the show at opening however.


'For the purposes of this exhibit, changes in GSR have been accepted as a 
'sufficiently accurate indicator of the participants level of stress. 
'Instantaneous GSR readings at any point are only of significance when 
'considered in context of their value relative to a reference point and 
'the trends that successive readings indicate. In this case the reference 
'point is taken as an initial reading close to the time the participant 
'first 'connects' with the calmpute. The trends are established and 
'fedback to the participant by varying the rate at which a few lit LED's 
'are sequenced around the 23 inch diameter ring.

'The calmpute is a device made by Thought Technologies of Belgrave Ave 
'Montreal PQ (514-489-8251 voice 514-489-8255 fax) to measure GSR. The 
'calmpute derrives it's operating power from an internal 9v battery 
'and is designed to provide a true rs232 level signal to a line of a 
'seral port on a PC. The output of the calmpute is opto isolated for 
'participants safety. 

'The circuit board custom produced for this exhibit bears the name:

'	"Calmpute Interface PCB 09/96"

'This PC Board is equipped with a male DB25 connector wired so as to be 
'directly compatible with the calmpute. The rs232 signal between the 
'stamp and the calmpute is 0 - 5v levels.

'The calmpute o/p appears to the stamp as a pulse of varying duration. The 
'stamp's pulsein command is used to measure the length of the pulse. 
'Values in the 10,000 - 25,000 range as reported by the pulsin command are 
'typical for participants although counts up to 30,000 are reported in 
'cases of a direct short at the calmpute electrodes. When the calmpute 
'electrodes are open circuit (ie: no participant connected), a zero count 
'is reported by the pulsin command.

'Since each participant potentially has a different initial gsr reading 
'the  program stores the gsr value from the second execution cycle after
'a participant is detected. A zero count from the pulsin command is 
'interpreted to mean no one is connected to the calmpute, as soon as the 
'count becomes non zero a few cycles are taken up with establishing inital 
'values for later reference.


'________________________________________________________________

'Program:

'Initilalization section
'_________________________________________________________________
'Constant declaration:

' Hardware interface with the 7219:
DATA_n  con	7	' Bits are shifted out this pin # to 7219.
CLK     con	5	' Data valid on rising edge of this clock pin.
Load    con	6	' Tells 7219 to transfer data to LEDs.

' Register addresses for the MAX7219. To control a given attribute
' of the display, for instance its brightness or the number shown 
' in a particular digit, you write the register address followed 
' by the data. For example, to set the brightness, you'd send 
' 'brite' followed by a number from 0 (off) to 15 (100% bright). 
decode 	con	9	' Decode register; a 1 turns on BCD decoding. 
brite	con	10	' "       "   " intensity register.
scan	con	11	' "       "   " scan-limit register.
switch	con	12	' "       "   " on/off register.
test	con	15	' Activates test mode (all digits on, 100% bright)
'__________________________________________________________________
'Variable declaration:
' Variables used in the program. 
max_dat	var	word	' Word to be sent to MAX7219. 
index   var	nib	' Index into setup table. 
bp	var	nib	' bit position counter
temp	var	nib	' Temporary variable used in outputting digits. 
flp	var	bit	' Flag used in changing directions. 
dispVal	var	byte (10)' Value to be displayed on the LEDs
nina	var	byte	'led bit on counter
ninit	con	7	'initial nina value
carry	var	bit	'shift carry flag	
cycle	var	byte	'display 'digit' counter
odd	var	index.bit0	' Lsb of index. 
top	var	byte
gsr	var	word	'gsr pulse length
gsra	var	word	'average gsr pulse length
gsrinit	var	word	'storeage of inital gsr value
av	var	byte	'average base counter
'chance	var	word	'downtime rate randomizer
led	var	byte	'led test shift variable
initr	var	nib	'counter for gsr init sample

' The program begins by setting up all pins to output low, matching
' the state established by the pulldown resistors. 
OUTS = 0		' All output latches low. 
DIRS = $FFFF		' All pins to output. 

' Next, it initializes the MAX7219. A lookup table is convenient way 
' to organize the setup data; each register address is paired with 
' its setting data. The table sets the scan limit to 4 (5 digits, 
' numbered 0-4); brightness to 3; BCD decoding to the lower 5 digits
' (the only ones we're displaying), and switches the display on. The 
' MAX7219 expects data in 16-bit packets, but our lookup table holds
' a series of 8-bit values. That's why the loop below is designed to 
' pulse the Load line _every_other_ byte transmitted. 
for index = 0 to 7		' Retrieve 8 items from table. 
  lookup index,[scan,7,brite,15,decode,$00,switch,1],max_dat
  shiftout DATA_n,CLK,msbfirst,[max_dat]
  if odd = 0  then noLoad	' If odd is 1, pulse Load line. 
  pulsout Load,1		
NoLoad:				' Else, don't pulse. 
next				' Get next item from table. 

' ====================== MAIN PROGRAM LOOP ==========================
' Now that the MAX7219 is properly initialized, we're ready to send it
' data. The loop below increments a 16-bit counter and displays it on 
' the LEDs connected to the MAX. Subroutines below handle the details
' of converting binary values to binary-coded decimal (BCD) digits and 
' sending them to the MAX. 

	'dispVal(5) = 1
	'dispVal.bit0(8)=1
	'debug ? dispVal(1)
	'carry = 1
Loop: 
	'for cycle = 1 to 56
	'if cycle = nina then on
	'carry=0
	'goto off
on:	'carry=1
off:	'gosub MaxDisplay
	'dispVal.bit7(cycle) = carry
	'next
	'nina=nina+1 max 56
	'goto loop

' ========================= SUBROUTINES ============================
' The MAX7219 won't accept a number like "2742" and display it on 
' the LEDs. Instead, it expects the program to send it individual 
' digits preceded by their position on the display. For example, 
' "2742" on a five-digit display would be expressed as: 
' "digit 5: blank; digit 4: 2; digit 3: 7; digit 2: 4; digit 1: 2"
' The routine MaxDisplay below does just that, separating a value
' into individual digits and sending them to the MAX7219. If the
' lefthand digits are zero (as in a number like "102") the 
' routine sends blanks, not zeros until it encounters the first 
' non-zero digit. This is called "leading-zero blanking."

dispVal(0)=$FF
dispVal(1)=$03
For index = 2 to 8
dispVal(index)=dispVal(index-1)*2
dispVal(9)=$00
'debug ? index, ? dispVal(index)
next
nina = 00
top = 0
cycle =1
flp =0
led=$55

newavg:	av=av+1
	'debug ?av
	initr=0
	gsrinit=0
	if av=15 then downtime

MaxDisplay:
	pulsin 1,1,gsr	'read in the gsr value from calmpute
			'then compare current gsr reading to initial one
			'establish a loop delay value.
	lookdown gsr,>[gsrinit+(5*gsra),gsrinit+(4*gsra),gsrinit+(3*gsra) ,gsrinit+(2*gsra),gsrinit+gsra,gsrinit,gsrinit-gsra,gsrinit-(2*gsra),gsrinit-(3*gsra),gsrinit-(4*gsra),gsrinit-(5*gsra),gsrinit-(6*gsra),gsrinit-(7*gsra),gsrinit-(8*gsra)],nina
	if gsr=0 then newavg	'if no gsr value then re initialize for next participant
	if initr<>1 then bean	'detect second pass with gsr <> 0 
	gsrinit=gsr+(gsr/20)	'remember gsr+5% as initial gsr value
	gsra=gsrinit/50		'establish base offset for gsr comparisons
bean:	initr=initr+1 max 2	'track initial cycle count
	if initr<2 then nonDisplay
	if av=0 then domore	'on any pass except the first one
	pulsout 2,10000		'start playback of the audio voice tracks

domore:	av=0
'	pause 20		'main cycle delay makes things work better
'	debug ? gsrinit,? gsra,? gsr,? nina, home	'
	for index = 1 to 8		'Work from digit 1 down to digit 8.
	for bp = 1 to 9			'work from lsb to msb
	shiftout DATA_n,CLK,msbfirst,[index]	'Send digit position. 
	shiftout DATA_n,CLK,msbfirst,[dispVal(bp)]' Send the digit. 
	pulsout Load,5			'And load the display. 
	pause nina			'nina is variable wait period
	next				'bp
	next				'index
	goto Maxdisplay


downtime:random gsra		'when not doing any one's gsr 
	nina=3*(gsra/6553)	'mark time with an occasional whip around
	goto domore		'the ring of leds



nonDisplay:
	pause 1000		'during initialization this delay takes the
	goto MaxDisplay		'place of the time taken up by the display 
				'routines.